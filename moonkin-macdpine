//@version=5
indicator(title="Moonkin MACD", shorttitle="Moonkin MACD")
// Getting inputs
fast_length = input(title="Fast Length", defval=12)
slow_length = input(title="Slow Length", defval=26)
src = input(title="Source", defval=close)
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9)
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"])
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"])
// Plot colors
col_macd = input(#ffffff, "MACD Line  ", group="Color Settings", inline="MACD")
col_signal = input(#ff0000, "Signal Line  ", group="Color Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below")
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
//macd = fast_ma - slow_ma
macd = (fast_ma - slow_ma) / slow_ma * 100 //ppo
signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal
hline(0, "Zero Line", color=color.new(#eef1b7, 50), linestyle = hline.style_solid)
plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
plot(macd, title="MACD", color=col_macd)
plot(signal, title="Signal", color=col_signal)
crossOver = ta.crossover(macd,signal)
crossUnder = ta.crossunder(macd,signal)
plot(crossOver or crossUnder ? macd : na , style = plot.style_cross, linewidth = 2, title="cross", color= crossUnder ? color.red : color.white)

//Alerts
alertcondition(crossOver or crossUnder, "MACD Cross", "{{exchange}}:{{ticker}}, price = {{close}}, volume = {{volume}}")

var string timestr = if timeframe.isminutes and str.tonumber(timeframe.period) >= 60
    str.tostring(str.tonumber(timeframe.period) / 60) + "H"
else 
    timeframe.period
    
var string tickerAndPeriodText = " for " + syminfo.ticker + " (" + timestr + ")" + " - " + str.tostring(close) + " - " + str.tostring(math.round(((src / src[1])-1)*100,2)) + "%"
if crossOver
    alert("MACD Cross Up" + tickerAndPeriodText, alert.freq_once_per_bar_close)
if crossUnder
    alert("MACD Cross Down" + tickerAndPeriodText, alert.freq_once_per_bar_close)